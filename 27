// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";

contract MyToken is ERC20, Ownable, Pausable {
    // Token details
    uint256 private constant INITIAL_SUPPLY = 1000000 * (10 ** 18); // 1 million tokens
    uint256 public maxSupply;
    
    // Anti-whale mechanism
    uint256 public maxTransferAmount;
    mapping(address => bool) public isExemptFromLimit;
    
    // Events
    event MaxSupplyUpdated(uint256 newMaxSupply);
    event MaxTransferAmountUpdated(uint256 newMaxTransferAmount);
    event AddressExemptionUpdated(address indexed account, bool isExempt);

    constructor() ERC20("MyToken", "MTK") {
        maxSupply = INITIAL_SUPPLY * 2; // Max supply is double the initial supply
        maxTransferAmount = INITIAL_SUPPLY / 100; // 1% of initial supply
        isExemptFromLimit[msg.sender] = true;
        _mint(msg.sender, INITIAL_SUPPLY);
    }

    // Minting functionality
    function mint(address to, uint256 amount) external onlyOwner {
        require(totalSupply() + amount <= maxSupply, "Would exceed max supply");
        _mint(to, amount);
    }

    // Transfer override with anti-whale mechanism
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual override whenNotPaused {
        require(amount > 0, "Transfer amount must be greater than zero");
        
        if (!isExemptFromLimit[sender] && !isExemptFromLimit[recipient]) {
            require(amount <= maxTransferAmount, "Transfer amount exceeds limit");
        }

        super._transfer(sender, recipient, amount);
    }

    // Admin functions
    function setMaxSupply(uint256 newMaxSupply) external onlyOwner {
        require(newMaxSupply >= totalSupply(), "Cannot set max supply below current supply");
        maxSupply = newMaxSupply;
        emit MaxSupplyUpdated(newMaxSupply);
    }

    function setMaxTransferAmount(uint256 newMaxTransferAmount) external onlyOwner {
        maxTransferAmount = newMaxTransferAmount;
        emit MaxTransferAmountUpdated(newMaxTransferAmount);
    }

    function setTransferLimitExemption(address account, bool exempt) external onlyOwner {
        isExemptFromLimit[account] = exempt;
        emit AddressExemptionUpdated(account, exempt);
    }

    function pause() external onlyOwner {
        _pause();
    }

    function unpause() external onlyOwner {
        _unpause();
    }

    // In case tokens are accidentally sent to the contract
    function rescueTokens(IERC20 token, address to, uint256 amount) external onlyOwner {
        require(address(token) != address(this), "Cannot rescue own token");
        token.transfer(to, amount);
    }
}
